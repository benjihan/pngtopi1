#! /bin/bash -eu
#
# ------------------------------------------------------------
# @file    mkstpng
# @author  Benjamin Gerard
# @brief   Create PI[123] compatible PNG to use with pngtopi1
# ------------------------------------------------------------

shopt -s nullglob
exec 11>&1                      # Copy stdout to 11 (just in case)
exec 12>&2                      # Copy stderr to 12 (just in case)
exec 3>/dev/null 		# Debug output

me=`basename "$0" .sh`
verbose=2			# 0:none 1:error 2:info 3:debug
W=320; H=200; L2C=2; EXT=pi1	# Default to pi1
D=3				# Default to STf

unset inp out

# ------------------------------------------------------------
#  Terminal colors
#

tput=true
[ -t 1 -a -t 2 ] && tput=`which tput 2>/dev/null`
_bld=`$tput bold`
_blk=`$tput blink`
_udl=`$tput smul`
_dim=`$tput dim`
_off=`$tput sgr0`
_bla=`$tput setf 0`; _BLA="${_bla}${_bld}"
_blu=`$tput setf 1`; _BLU="${_blu}${_bld}"
_grn=`$tput setf 2`; _GRN="${_grn}${_bld}"
_cya=`$tput setf 3`; _CYA="${_cya}${_bld}"
_red=`$tput setf 4`; _RED="${_red}${_bld}"
_mgt=`$tput setf 5`; _MGT="${_mgt}${_bld}"
_ylo=`$tput setf 6`; _YLO="${_ylo}${_bld}"
_whi=`$tput setf 7`; _WHI="${_whi}${_bld}"
_nrm="$_off"

# ------------------------------------------------------------
# Log functions
#
internal() { echo "${_RED}${me}${_off}: $@" >&12; exit 66; }
ecat() { cat >&2; }
icat() { cat; }
dcat() { cat >&3; }
dmsg() { dcat <<<"$*${_nrm}"; }
imsg() { icat <<<"$*${_nrm}"; }
emsg() { ecat <<<"${_RED}${me}${_off}: $*${_nrm}"; }

# ------------------------------------------------------------
#  Command line parsing

sopt=":hvqefr:"
while getopts "$sopt" opt "$@"; do
    case "$opt" in
	h) echo "TO DO Usage"; exit 0 ;;
	V) echo "TODO Version"; exit 0 ;;
	v) verbose=$(( verbose + (verbose<3) )) ;;
	q) verbose=$(( verbose - (verbose>0) )) ;;
	f) D=3 ;;
	e) D=4 ;;
	r) case "$OPTARG" in
	       l|L|1) W=320; H=200; L2C=2; EXT=pi1 ;;
	       m|M|2) W=640; H=200; L2C=1; EXT=pi2 ;;
	       h|H|3) W=640; H=400; L2C=0; EXT=pi3 ;;
	       *) emsg "invalid argument for ${_bld}-$opt${_off} -- '$OPTARG'"
		  exit 1 ;;
	   esac ;;
	?) emsg "illegal option ${_bld}-$OPTARG${_nrm}"; exit 1 ;;
	*) internal "option not handled -- '$opt'" >&2 ;;
    esac
done

C=$(( 1 << ( 1 << L2C ) ))
E=$(( 1 << D ))			# 8 or 16 color/component

[ "$opt" = '?' ] || exit 1

case $verbose in
    0) exec  >/dev/null; exec 2>/dev/null ;;
    1) exec  >/dev/null ;;
    2) ;;
    3) exec 3>&2;;
    *) internal "option not handled -- '$opt'" >&2 ;;
esac

shift $(( OPTIND-1 ))

if [ ${1+set} ]; then
    inp="$1"; shift
else
    emsg "missing input argument"; exit 1
fi

if [ ${1+set} ]; then
    out="$1"; shift
else
    emsg "missing output argument"; exit 1
fi

imsg "${_cya}input${_off}: \"${inp}\""

if [ -z ${convert-} ]; then
       convert=`which convert 2>/dev/null` ||
	   { emsg "${_bld}convert${_off} not found"; exit 1; }
   fi
dmsg "${_ylo}convert${_off}: $convert"

if [ -z ${montage-} ]; then
       montage=`which montage 2>/dev/null` ||
	   { emsg "${_bld}montage${_off} not found"; exit 1; }
   fi
dmsg "${_ylo}montage${_off}: $montage"

cv_resize() {
    local s dh d=72			# base density
    dh=$(( d*W*10/(H*16) ))
    s="-colorspace RGB -resize ${W}x${H}! -colorspace sRGB"
    s+=" -set units PixelsPerInch -density ${d}x${dh}"
#    s+=" -quantize Rec709YCbCr"
    dmsg "${_ylo}resize${_off}: $s"
    printf "%s" "$s"
}

dmsg "${_cya}format${_off}: ${W}x${H}x${C} $D-bit/$E values chan"
l=0
der=$(( (256>>D)*100/256  ))
dmsg "${_cya}error-diff${_off}: $der%"

red_dither="-dither Riemersma -define dither:diffusion-amount=${der}%"
color_reduc="${red_dither} ${Q+-quantize $Q} -colors $C"

dmsg "${_ylo}color-reduction${_off}: $color_reduc"
imsg "${_cya}output${_off}: \"${out}\""

# if test -z "${pngtopi1+set}" &&
#        ! pngtopi1=`which pngtopi1 2>/dev/null`; then
#     emsg "missing pngtopi1"
#     exit 1
# fi
# pngtopi1_flags=--color=${D}r\ -q

case ${mode-7} in
    
    1)
	# Color reduction only
	#
	label="Reduction-only"
	$convert "${inp}" \
		 $(cv_resize) \
		 ${color_reduc} \
		 "$out"
	;;
    
    2)
	# Reduc+Depth
	#
	label="Reduc+Depth:$D"
	$convert "${inp}" \
		 $(cv_resize) \
		 ${color_reduc} \
		 -depth $D \
		 "$out"
	;;

    3)
	# Depth+Reduc
	#
	label="Depth:$D+Reduc"
	$convert "${inp}" \
		 $(cv_resize) \
		 -depth $D \
		 ${color_reduc} \
		 "$out"
	;;

    4)
	# Posterize
	#
	label="Posterize:$E"
	$convert "${inp}" \
		 $(cv_resize) \
		 -posterize $E \
		 ${color_reduc} \
		 "$out"
	;;

    5)
	# Threshold
	#
	label="Threshold:$E"
	$convert "${inp}" \
		 $(cv_resize) \
		 -ordered-dither threshold,$E,$E,$E \
		 ${color_reduc} \
		 "$out"
	;;
    6)
	# Checkerboard
	#
	label="Checkerboard:$E"
	$convert "${inp}" \
		 $(cv_resize) \
		 -ordered-dither 2x1,$E,$E,$E \
		 ${color_reduc} \
		 "$out"
	;;
    7)
	# Ordered 2x2  
	#
	label="Ordered/2x2::$E"
	$convert "${inp}" \
		 $(cv_resize) \
	 -ordered-dither 2x2,$E,$E,$E \
	 ${color_reduc} \
	 "$out"
	;;

    8)
	# Halftone 4x4 (Angled)
	#
	label="Halftone/4x4(angled):$E"
	$convert "${inp}" \
		 $(cv_resize) \
		 -ordered-dither 4x1,$E,$E,$E \
		 ${color_reduc} \
		 "$out"
	;;

    9)
	# Halftone 4x4 (Ortho)
	#
	label="Halftone/4x4(ortho):$E"
	$convert "${inp}" \
		 $(cv_resize) \
		 -ordered-dither h4x4o,$E,$E,$E \
		 ${color_reduc} \
		 "$out"
	;;

    10)
	# Circles 5x5 (black)
	#
	label="Circles-5x5(black):$E"
	$convert "${inp}" \
		 $(cv_resize) \
		 -ordered-dither c5x5b,$E,$E,$E \
		 ${color_reduc} \
		 "$out"
	;;

    11)
	# Circles 5x5 (white)
	#
	label="Circles-5x5(White):$E"
	$convert "${inp}" \
		 $(cv_resize) \
		 -ordered-dither c5x5w,$E,$E,$E \
		 ${color_reduc} \
		 "$out"
	;;

esac
